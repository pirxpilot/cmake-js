#!/usr/bin/env node
"use strict";

var log = require("npmlog");
var util = require("util");
var fs = require("fs");
var path = require("path");

var version = require("../package").version;
var logLevels = ["silly", "verbose", "info", "http", "warn", "error"];

var argv = require('minimist')(process.argv.slice(2), {
    boolean: [ "h", "D", "m", "x", "g", "C", "o", "i" ],
    string: [ "l", "d", "c", "G", "t", "T", "s", "r", "v", "a", "O", "CD" ],
    alias: {
        h: "help",
        l: [ "log-level", "logLevel" ],
        d: "directory",
        D: "debug",
        c: [ "cmake-path", "cmakePath" ],
        m: [ "prefer-make", "preferMake" ],
        x: [ "prefer-xcode", "preferXcode" ],
        g: [ "prefer-gnu", "preferGnu" ],
        G: "generator",
        t: "toolset",
        T: "target",
        C: [ "prefer-clang", "preferClang" ],
        s: "std",
        r: "runtime",
        v: [ "runtime-version", "runtimeVersion" ],
        a: "arch",
        o: "prec11",
        i: "silent",
        O: "out"
    },
    '--': true
});

// If help, then print and exit:

if (argv.help) {
    var filename = path.join(__dirname, "..", "doc", "help.txt");
    console.info('cmake-js', version);
    fs.createReadStream(filename).pipe(process.stdout);
    return;
}

if (argv.version) {
    console.info(version);
    return;
}

// Setup log level:

if (logLevels.includes(argv.logLevel)) {
    log.level = argv.logLevel;
    log.resume();
}

log.silly("CON", "argv:");
log.silly("CON", util.inspect(argv));

log.verbose("CON", "Parsing arguments");

// Extract custom cMake options
var customOptions = Object.keys(argv)
    .filter(function(key) { return key.startsWith("CD"); })
    .reduce(function(co, key) {
        co[key.slice(2)] = argv[key];
        return co;
    }, {});

var options = {
    directory: argv.directory || null,
    debug: argv.debug,
    cmakePath: argv.cmakePath || null,
    generator: argv.generator,
    toolset: argv.toolset,
    target: argv.target,
    preferMake: argv.preferMake,
    preferXcode: argv.preferXcode,
    preferGnu: argv.preferGnu,
    preferClang: argv.preferClang,
    std: argv.s || (argv.o ? "c++98" : null),
    runtime: argv.runtime,
    runtimeVersion: argv.runtimeVersion,
    arch: argv.arch,
    cMakeOptions: customOptions,
    silent: argv.silent,
    out: argv.out
};

log.verbose("CON", "options:");
log.verbose("CON", util.inspect(options));

function run(command) {
    function print(out) {
        console.info(out);
    }

    log.verbose("CON", "Running command: " + command);

    var BuildSystem = require("../").BuildSystem;
    var bs = new BuildSystem(options);

    switch(command) {
    case "install":         return bs.install();
    case "configure":       return bs.configure();
    case "print-configure": return bs.getConfigureCommand().then(print);
    case "build":           return bs.build();
    case "print-build":     return bs.getBuildCommand().then(print);
    case "clean":           return bs.clean();
    case "print-clean":     return bs.getCleanCommand().then(print);
    case "reconfigure":     return bs.reconfigure();
    case "rebuild":         return bs.rebuild();
    case "compile":         return bs.compile();
    default:
        log.error("COM", "Unknown command: " + command);
        return Promise.reject();
    }
}

run(argv._[0] || "build").catch(function () {
    process.exit(1);
});
