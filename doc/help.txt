
Usage: cmake-js [<command>] [options]

Commands:
  install          Install Node.js/io.js distribution files if needed
  configure        Configure CMake project
  print-configure  Print the configuration command
  build            Build the project (will configure first if required)
  print-build      Print the build command
  clean            Clean the project directory
  print-clean      Print the clean command
  reconfigure      Clean the project directory then configure the project
  rebuild          Clean the project directory then build the project
  compile          Build the project, and if build fails, try a full rebuild

Options:
  --version               show version number
  -h, --help              show help
  -l, --log-level         set log level (silly, verbose, info, http, warn, error), default is info
  -d, --directory         specify CMake project's directory (where CMakeLists.txt located)
  -D, --debug             build debug configuration
  -c, --cmake-path        path of CMake executable
  -m, --prefer-make       use Unix Makefiles even if Ninja is available (Posix)
  -x, --prefer-xcode      use Xcode instead of Unix Makefiles
  -g, --prefer-gnu        use GNU compiler instead of default CMake compiler, if available (Posix)
  -G, --generator         use specified generator
  -T, --target            only build the specified target
  -C, --prefer-clang      use Clang compiler instead of default CMake compiler, if available (Posix)
  -s, --std               C++ standard, eg.: c++98, c++11, c++14, etc., default is c++11 (Posix)
  -r, --runtime           the runtime to use
  -v, --runtime-version   the runtime version to use
  -a, --arch              the architecture to build in
  -o, --prec11            use C++98 standard (obsolete: use -s=c++98 instead)
  --CD                    custom argument passed to CMake in format: -D<your-arg-here>
  -i, --silent            prevent CMake.js from printing to the stdio
  -O, --out               output directory to compile to, default is projectRoot/build
